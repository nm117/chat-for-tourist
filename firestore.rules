rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }
    function isUserAuthenticated(userId) {
      return isAuthenticated() && userId == request.auth.uid;
    }
    function existingData() {
      return resource.data;
    }
    function incomingData() {
      return request.resource.data;
    }


    //USERS
    match /users/{userId} {
      allow get: if isAuthenticated();
      allow create: if isUserAuthenticated(userId)
                    && incomingData().keys().hasAll(['username', 'avatar', 'created'])
                    && isValidUser(incomingData());
      allow update: if isUserAuthenticated(userId)
                    && isValidUserUpdate(incomingData())
                    && incomingData().created == existingData().created;
      allow delete: if isUserAuthenticated(userId);
      
      function isValidUser(user) {
        return user.username is string
        && user.avatar is string
        && user.created is timestamp;
      }
      function isValidUserUpdate(user) {
        return (!('updated' in user) || user.updated is timestamp)
        && (!('bio' in user) || user.bio is string)
        && (!('avatar' in user) || user.avatar is string)
        && user.username is string
        && user.created is timestamp;
      }
    }


    //ROOMS
    match /rooms/{roomsId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
                    && incomingData().keys().hasAll(['roomname', 'prefecture', 'roomIcon', 'created'])
                    && isValidRoom(incomingData());
      allow update: if isAuthenticated()
                    && incomingData().keys().hasAll(['roomname', 'prefecture', 'roomIcon', 'created'])
                    && isValidRoomUpdate(incomingData())
                    && incomingData().created == existingData().created;

      function isValidRoom(room) {
        return room.roomname is string
        && room.prefecture is string
        && room.roomIcon is string
        && room.created is timestamp;
      }
      function isValidRoomUpdate(room) {
        return (!('joinIds' in room) || 'joinIds' in room)
        && (!('updated' in room) || room.updated is timestamp)
        && (!('roomIcon' in room) || room.updated is timestamp)
        && room.roomname is string
        && room.prefecture is string
        && room.created is timestamp;
      }
    }


    //CHATS
    match /rooms/{roomsId}/chats/{chatsId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
                    && incomingData().keys().hasAll(['userId', 'username', 'item', 'isRead', 'avatar', 'created'])
                    && isValidChat(incomingData());
      allow update: if isAuthenticated()
                    && incomingData().keys().hasAll(['userId', 'username', 'item', 'isRead', 'avatar', 'created'])
                    && isValidChatUpdate(incomingData())
                    && incomingData().created == existingData().created
                    && incomingData().item == existingData().item;
      allow delete: if isUserAuthenticated(existingData().userId);

      function isValidChat(chat) {
        return 'userId' in chat
        && 'username' in chat && chat.username is string
        && 'item' in chat && chat.item is string
        && 'avatar' in chat && chat.avatar is string
        && 'isRead' in chat && chat.isRead is bool
        && 'created' in chat && chat.created is timestamp;
      }
      function isValidChatUpdate(chat) {
        return (!('isReadUsers' in chat) || 'isReadUsers' in chat)
        && (!('likeCount' in chat) || chat.likeCount is number)
        && chat.username is string
        && chat.item is string
        && chat.avatar is string
        && chat.isRead is bool
        && chat.created is timestamp;
      }
    }


    //CHATS Collection Group
    match /{path=**}/chats/{chatsId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
                    && incomingData().keys().hasAll(['userId', 'username', 'item', 'isRead', 'created'])
                    && isValidChat(incomingData());
      allow update: if isAuthenticated()
                    && incomingData().keys().hasAll(['userId', 'username', 'item', 'isRead', 'created'])
                    && isValidChatUpdate(incomingData())
                    && incomingData().created == existingData().created
                    && incomingData().item == existingData().item
      allow delete: if isUserAuthenticated(existingData().userId);
      
        function isValidChat(chat) {
        return 'userId' in chat
        && 'username' in chat && chat.username is string
        && 'item' in chat && chat.item is string
        && 'isRead' in chat && chat.isRead is bool
        && 'created' in chat && chat.created is timestamp;
      }
      function isValidChatUpdate(chat) {
        return (!('isReadUsers' in chat) || 'isReadUsers' in chat)
        && (!('avatar' in chat) || chat.avatar is string)
        && chat.username is string
        && chat.item is string
        && chat.isRead is bool
        && chat.created is timestamp;
      }
    }


    //LIKEDUSERS
    match /rooms/{roomsId}/chats/{chatsId}/likedUsers/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
                    && isValidLikedUsers(incomingData());
      allow update: if isAuthenticated()
                    && isValidLikedUsersUpdate(incomingData());
      allow delete: if isUserAuthenticated(userId);

      function isValidLikedUsers(likedUsers) {
        return 'username' in likedUsers && likedUsers.username is string;
      }
      function isValidLikedUsersUpdate(likedUsers) {
        return 'username' in likedUsers && likedUsers.username is string;
      }
    }


    //JOINUSERS
    match /rooms/{roomsId}/joinUsers/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
                    && isValidJoinUsers(incomingData());
      allow update: if isAuthenticated()
                    && isValidJoinUsersUpdate(incomingData());
      allow delete: if isUserAuthenticated(userId);

      function isValidJoinUsers(joinUsers) {
        return 'username' in joinUsers;
      }
      function isValidJoinUsersUpdate(joinUsers) {
        return (!('username' in joinUsers) || 'username' in joinUsers)
        && (!('unreadMessage' in joinUsers) || joinUsers.unreadMessage is number);
      }
    }
    
  }
}