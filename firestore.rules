rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }
    function isUserAuthenticated(userId) {
      return isAuthenticated() && userId == request.auth.uid;
    }
    function existingData() {
      return resource.data;
    }
    function incomingData() {
      return request.resource.data;
    }


    //USERS
    match /users/{userId} {
      allow read: if isUserAuthenticated(userId);
      allow create: if isUserAuthenticated(userId)
                    && incomingData().keys().hasAll(['username', 'created'])
                    && isValidUser(incomingData());
      allow update: if isUserAuthenticated(userId)
                    && incomingData().keys().hasAll(['username', 'created'])
                    && incomingData().keys().hasOnly(['username', 'created', 'bio', 'icon','updated'])
                    && isValidUserUpdate(incomingData())
                    && incomingData().created == existingData().created;
      allow delete: if isUserAuthenticated(userId);
      
      function isValidUser(user) {
        return user.username is string
        && user.created is timestamp;
      }
      function isValidUserUpdate(user) {
        return (!('updated' in incomingData().keys()) || user.updated is timestamp)
        && (!('bio' in incomingData().keys()) || user.bio is string)
        && (!('icon' in incomingData().keys()) || user.icon is string)
        
        // return !user.updated in user || user.updated is timestamp
        // && !user.bio in user || user.bio is string
        // && !user.icon in user || user.icon is string
        && user.created is timestamp
        && user.username is string;
      }
    }


    //ROOMS
    match /rooms/{roomsId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
                    && incomingData().keys().hasAll(['roomname', 'prefecture', 'created'])
                    && isValidRoom(incomingData());
      allow update: if isAuthenticated()
                    && incomingData().keys().hasAll(['roomname', 'prefecture', 'created'])
                    && isValidRoomUpdate(incomingData())
                    && incomingData().created == existingData().created;

      function isValidRoom(room) {
        return room.roomname is string
        && room.prefecture is string
        && room.created is timestamp;
      }
      function isValidRoomUpdate(room) {
        return 'joinUsers' in room
        && 'updated' in room && room.updated is timestamp
        && room.roomname is string
        && room.prefecture is string
        && room.created is timestamp;
      }
    }

      //CHATS
      match /rooms/{roomsId}/chats/{chatsId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated()
                      && incomingData().keys().hasAll(['userId', 'username', 'item', 'isRead', 'created'])
                      && isValidChat(incomingData());
        allow update: if isAuthenticated()
                      && incomingData().keys().hasAll(['userId', 'username', 'item', 'isRead', 'created'])
                      && isValidChatUpdate(incomingData())
                      && incomingData().created == existingData().created
                      && incomingData().item == existingData().item
        allow delete: if isUserAuthenticated(existingData().userId);

        function isValidChat(chat) {
          return 'userId' in chat
          && 'username' in chat && chat.username is string
          && 'item' in chat && chat.item is string
          && 'isRead' in chat && chat.isRead is bool
          && 'created' in chat && chat.created is timestamp;
        }
        function isValidChatUpdate(chat) {
          return 'isRead' in chat && chat.isRead is bool
          && 'isReadUsers' in chat
          && chat.username is string
          && chat.item is string
          && chat.isRead is bool
          && chat.created is timestamp;
        }
      }

        //LIKEDUSERS
        match /rooms/{roomsId}/chats/{chatsId}/likedUsers/{userId} {
          allow read: if isAuthenticated();
          allow create: if isAuthenticated()
                        && isValidLikedUsers(incomingData());
          allow update: if isAuthenticated()
                        && isValidLikedUsersUpdate(incomingData());
          allow delete: if isUserAuthenticated(userId);

          function isValidLikedUsers(likedUsers) {
            return 'username' in likedUsers && likedUsers.username is string;
          }
          function isValidLikedUsersUpdate(likedUsers) {
            return 'username' in likedUsers && likedUsers.username is string;
          }
        }
  }
}